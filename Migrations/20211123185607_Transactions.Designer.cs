// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingPub.Data;

namespace TradingPub.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211123185607_Transactions")]
    partial class Transactions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TradingPub.Models.Crypto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TraderID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TraderID");

                    b.ToTable("Cryptos");
                });

            modelBuilder.Entity("TradingPub.Models.CryptoTransaction", b =>
                {
                    b.Property<int>("CryptoTransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CryptoID")
                        .HasColumnType("int");

                    b.Property<int>("TraderID")
                        .HasColumnType("int");

                    b.HasKey("CryptoTransactionID");

                    b.HasIndex("CryptoID");

                    b.HasIndex("TraderID");

                    b.ToTable("CryptoTransactions");
                });

            modelBuilder.Entity("TradingPub.Models.Quotation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("TradingPub.Models.Stocks", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("TradingPub.Models.StocksTransaction", b =>
                {
                    b.Property<int>("StocksTransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StocksID")
                        .HasColumnType("int");

                    b.Property<int>("TraderID")
                        .HasColumnType("int");

                    b.HasKey("StocksTransactionID");

                    b.HasIndex("StocksID");

                    b.HasIndex("TraderID");

                    b.ToTable("StocksTransactions");
                });

            modelBuilder.Entity("TradingPub.Models.Trader", b =>
                {
                    b.Property<int>("TraderID")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TraderID");

                    b.ToTable("Traders");
                });

            modelBuilder.Entity("TradingPub.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuotationID")
                        .HasColumnType("int");

                    b.Property<int>("TraderID")
                        .HasColumnType("int");

                    b.HasKey("TransactionID");

                    b.HasIndex("QuotationID");

                    b.HasIndex("TraderID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TradingPub.Models.Crypto", b =>
                {
                    b.HasOne("TradingPub.Models.Trader", null)
                        .WithMany("Cryptos")
                        .HasForeignKey("TraderID");
                });

            modelBuilder.Entity("TradingPub.Models.CryptoTransaction", b =>
                {
                    b.HasOne("TradingPub.Models.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingPub.Models.Trader", "Trader")
                        .WithMany()
                        .HasForeignKey("TraderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crypto");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("TradingPub.Models.StocksTransaction", b =>
                {
                    b.HasOne("TradingPub.Models.Stocks", "Stocks")
                        .WithMany()
                        .HasForeignKey("StocksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingPub.Models.Trader", "Trader")
                        .WithMany()
                        .HasForeignKey("TraderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stocks");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("TradingPub.Models.Transaction", b =>
                {
                    b.HasOne("TradingPub.Models.Quotation", "Quotation")
                        .WithMany("Transactions")
                        .HasForeignKey("QuotationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingPub.Models.Trader", "Trader")
                        .WithMany("Transactions")
                        .HasForeignKey("TraderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotation");

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("TradingPub.Models.Quotation", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TradingPub.Models.Trader", b =>
                {
                    b.Navigation("Cryptos");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
